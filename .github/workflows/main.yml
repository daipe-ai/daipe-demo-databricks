name: pipeline
on:
  push:
  schedule:
    - cron: "0 6 * * *"

jobs:
  pipeline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: conda-incubator/setup-miniconda@v2.0.0
        with:
          miniconda-version: 'py38_4.8.3'
      - name: setup
        run: |
          export SHELL=$SHELL # for python to be able to access the bash version
          ./env-init.sh -y --verbose
      - name: linting
        run: |
          eval "$(conda shell.bash hook)"
          conda activate $PWD/.venv
          source ~/.poetry/env
          poe black-check
          poe flake8
  release:
    needs: pipeline
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: conda-incubator/setup-miniconda@v2.0.0
        with:
          miniconda-version: 'py38_4.8.3'
      - name: setup
        env:
          DBX_URL: ${{ secrets.DBX_URL }}
          PROJECT_NAME: ${{ daipedemo }}
          DBX_TOKEN: ${{ secrets.DBX_TOKEN }}
        run: |
          cp .env.dist .env
          sed -i "s,DBX_TOKEN=,DBX_TOKEN=$DBX_TOKEN,g" .env
          sed -i "s,\[Your DEV cluster address\],$DBX_URL,g" $PWD/src/daipedemo/_config/config_dev.yaml
          export SHELL=$SHELL # for python to be able to access the bash version
          ./env-init.sh -y --verbose
      - name: release
        env:
          DBX_TOKEN: ${{ secrets.DBX_TOKEN }}
        run: |
          eval "$(conda shell.bash hook)"
          conda activate $PWD/.venv
          source ~/.poetry/env
          poetry install --no-root
          echo "token here"
          echo $DBX_TOKEN
          daipe dbx deploy --env=dev
